openapi: 3.0.0
info:
  description: |
    This is the api for Kalepa web and movil
    [https://kalepa-api.herokuapp.com/](https://kalepa-api.herokuapp.com/)
  version: "0.0.2-oas3"
  title: Kalepa
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: 738866@unizar.es
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: Echo
    description: Example echo operations
  - name: User
    description: Everything about an user
    externalDocs:
      description: Find out more (WIP)
      url: 'http://kalepa-api.herokuapp.com'
  - name: Product
    description: Products in sell by an user

paths:
  /echo: # path parameter in curly braces
    post: # documentation for POST operation for this path
      tags:
        - Echo
      summary: Echo test
      description: Receive the exact message you've sent
      operationId: echo
      responses:
        '200':
          description: OK
          # document headers for this response
          headers:
            X-Rate-Limit: # Header name
              description: calls per hour allowed by the user
              schema: # Header schema
                type: integer
                format: int32
          content:
            application/json:
              schema:
                type: string
              examples:
                response:
                  value: Hello world!
            application/xml:
              schema:
                type: string
            text/csv:
              schema:
                type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: Hello world!
          application/xml:
            schema:
              type: string
              example: Hello world!
        description: Echo payload
        required: true


  /product:
    post:
      tags:
        - Product
      summary: Add a new product to the store
      operationId: addproduct
      responses:
        '400':
          description: Invalid input
        default:
          description: 'successful operation, return product id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - users_auth:
            - 'write:products'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewProduct'
          application/xml:
            schema:
              $ref: '#/components/schemas/NewProduct'
        description: product object that needs to be added to the store
        required: true

  '/product/{id}':
    get:
      tags:
        - Product
      summary: Find product by ID
      description: Returns a single product
      operationId: getproductById
      parameters:
        - name: id
          in: path
          description: ID of product to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
            application/xml:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

    put:
      tags:
        - Product
      summary: Updates a product in the store with form data
      description: User must be logged and the owner of the product
      operationId: updateproductWithForm
      parameters:
        - name: id
          in: path
          description: ID of product that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '405':
          description: Invalid input
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - users_auth:
            - 'write:products'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewProduct'
        description: Updated the product info
        required: true
    delete:
      tags:
        - Product
      summary: Deletes a product
      description: User must be logged and the owner of the product
      operationId: deleteproduct
      parameters:
        - name: id
          in: path
          description: product id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied / not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        default:
          description: successful action
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - users_auth:
            - 'write:products'
  
  /user:
    post:
      tags:
        - User
      summary: Create new user
      description: This can be used wihtout login
      operationId: createUser
      responses:
        default:
          description: 'successful operation, return user id on message'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
        description: Created user object
        required: true
    get:
      tags:
        - User
      summary: Get logged user info
      operationId: getLoggedUser
      responses:
        '400':
          description: Some error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullUser'
            application/xml:
              schema:
                $ref: '#/components/schemas/FullUser'
      security:
        - users_auth:
            - 'loged:user'
    put:
      tags:
        - User
      summary: Update logged user
      description: This can only be done by the logged in user.
      operationId: updateLoggedUser
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - users_auth:
            - 'loged:user'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FullUser'
        description: Updated full user object (id is not requiered)
        required: true
    delete:
      tags:
        - User
      summary: Delete logged user
      description: This can only be done by the logged in user.
      operationId: deleteLoggedUser
      responses:
        '400':
          description: Some error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - users_auth:
            - 'loged:user'

  /bids:
    get:
      tags:
        - Bid
      summary: Get bids of products
      operationId: getBids
      responses:
        '400':
            description: Some error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiResponse'
              application/xml:
                schema:
                  $ref: '#/components/schemas/ApiResponse'
        default:
          description: successful operation
          content:
            application/json:
              schema:
                properties:
                  length:
                    type: integer
                  list:
                    type: array
                    items:
                      $ref: '#/components/schemas/Bid'

  '/bid/{id}':
    get:
      tags:
        - Bid
      summary: Get bids of product id
      operationId: getBidbyId
      parameters:
        - name: id
          in: path
          description: The id of the user
          required: true
          schema:
            type: string
      responses:
        '400':
            description: Some error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiResponse'
              application/xml:
                schema:
                  $ref: '#/components/schemas/ApiResponse'
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bid'

    post:
      tags:
        - Bid
      summary: Bid on a bid
      operationId: postBid
      parameters:
        - name: id
          in: path
          description: The id of theproduct
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                bid:
                  type: number
                  example: "9.99"
        description: Price
        required: true
      responses:
        '400':
          description: Some error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        default:
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiResponse'
      security:
        - users_auth:
          - 'loged:user'

  '/products/{id}':
    get:
      tags:
        - Product
      summary: Get list of products of user
      operationId: getProducts_byId
      parameters:
        - name: id
          in: path
          description: The id of theproduct
          required: true
          schema:
            type: integer
      responses:
        '400':
            description: Some error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiResponse'
        default:
          description: successful operation
          content:
            application/json:
              schema:
                properties:
                  length:
                    type: integer
                  list:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'

  /products:
    get:
      tags:
        - Product
      summary: Get list of products
      operationId: getProducts
      responses:
        '400':
            description: Some error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiResponse'
              application/xml:
                schema:
                  $ref: '#/components/schemas/ApiResponse'
        default:
          description: successful operation
          content:
            application/json:
              schema:
                properties:
                  length:
                    type: integer
                  list:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProductLite'

  '/product/{id}/bidup':
    put:
      tags:
        - Bid
      summary: Set bid on, on a product
      operationId: bidProduct
      parameters:
        - name: id
          in: path
          description: The id of the product
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                bid_until:
                  type: string
                  format: date
                  example: "1999-12-24 23:45:10"
        description: Ban parameters
        required: true
      responses:
        '400':
            description: Some error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiResponse'
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - users_auth:
            - 'loged:user'

  '/product/{id}/biddown':
    put:
      tags:
        - Bid
      summary: Set bid off on product
      operationId: unbidProduct
      parameters:
        - name: id
          in: path
          description: The id of the product
          required: true
          schema:
            type: string
      responses:
        '400':
            description: Some error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiResponse'
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - users_auth:
            - 'loged:user'

  '/product/{id}/follow':
    post:
      tags:
        - Product
      summary: Logged user follow id product
      operationId: followProductId
      parameters:
        - name: id
          in: path
          description: The id of the product
          required: true
          schema:
            type: string
      responses:
        '400':
            description: Some error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiResponse'
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - users_auth:
            - 'loged:user'

  '/product/{id}/unfollow':
    post:
      tags:
        - Product
      summary: Logged user unfollow id product
      operationId: unFollowProductId
      parameters:
        - name: id
          in: path
          description: The id of the product
          required: true
          schema:
            type: string
      responses:
        '400':
            description: Some error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiResponse'
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - users_auth:
            - 'loged:user'

  '/product/{id}/ban':
    put:
      tags:
        - Product
      summary: Ban product
      operationId: banProduct
      parameters:
        - name: id
          in: path
          description: The id of the product
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                ban_reason:
                  type: string
                  example: Ban for scam
        description: Ban parameters
        required: true
      responses:
        '400':
            description: Some error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiResponse'
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - users_auth:
            - 'loged:user'
            - 'moder:user'

  /user/follows:
    get:
      tags:
        - User
      summary: Get logged user follow products
      description: This can only be done by the logged in user.
      operationId: userFollowsList
      responses:
        '400':
          description: Some error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        default:
          description: successful operation
          content:
            application/json:
              schema:
                properties:
                  length:
                    type: integer
                  list:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        title:
                          type: string
                          example: Gafas
                        descript:
                          type: string
                          example: Descripcion del producto
                        price:
                          type: number
                          example: '9.99'
                        main_image:
                          type: string
                          format: url
                          example: 'http://images.com/134h1u3'
            application/xml:
              schema:
                properties:
                  length:
                    type: integer
                  list:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        title:
                          type: string
                          example: Gafas
                        descript:
                          type: string
                          example: Descripcion del producto
                        price:
                          type: number
                          example: '9.99'
                        main_image:
                          type: string
                          format: url
                          example: 'http://images.com/134h1u3'
      security:
        - users_auth:
            - 'loged:user'
  /login:
    post:
      tags:
        - User
      summary: Logs user into the system
      operationId: loginUser
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      requestBody:
        content:
          application/json:
            schema:
              properties:
                nick:
                  type: string
                  example: Pepito
                pass:
                  type: string
                  example: pass
                remember:
                  type: boolean
        description: Created user object
        required: true
  /logout:
    get:
      tags:
        - User
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - users_auth:
            - 'loged:user'
  '/profile/{nick}':
    get:
      tags:
        - User
      summary: Get user info by user nick
      operationId: getUserByNick
      parameters:
        - name: nick
          in: path
          description: The name that needs to be fetched. Use user1 for testing.
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Some error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  '/user/{id}':
    get:
      tags:
        - User
      summary: Get user info by user id
      description: This can only be done by the logged mod user.
      operationId: getUserById
      parameters:
        - name: id
          in: path
          description: The name that needs to be fetched. Use user1 for testing.
          required: true
          schema:
            type: integer
      responses:
        '400':
          description: Some error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullUser'
            application/xml:
              schema:
                $ref: '#/components/schemas/FullUser'
      security:
        - users_auth:
            - 'loged:user'
            - 'moder:user'
    put:
      tags:
        - User
      summary: Updated user
      description: This can only be done by the logged mod user.
      operationId: updateUserById
      parameters:
        - name: id
          in: path
          description: id that need to be updated
          required: true
          schema:
            type: integer
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - users_auth:
            - 'loged:user'
            - 'moder:user'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FullUser'
        description: Updated full user object
        required: true
    delete:
      tags:
        - User
      summary: Delete user
      description: This can only be done by the logged mod user.
      operationId: deleteUserById
      parameters:
        - name: id
          in: path
          description: The id that needs to be deleted
          required: true
          schema:
            type: integer
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - users_auth:
            - 'loged:user'
            - 'moder:user'
  '/user/{id}/ban':
    put:
      tags:
        - User
      summary: Ban user
      description: This can only be done by the logged mod user.
      operationId: banUser
      parameters:
        - name: id
          in: path
          description: user id to ban
          required: true
          schema:
            type: integer
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - users_auth:
            - 'loged:user'
            - 'moder:user'
      requestBody:
        content:
          application/json:
            schema:
              properties:
                ban_reason:
                  type: string
                  example: Ban for scam
                ban_until:
                  type: string
                  format: date
                  example: "1999-12-24 23:45:10"
        description: Updated full user object
        required: true

  '/user/{id}/mod':
    put:
      tags:
        - User
      summary: Make mod a user
      description: This can only be done by the logged mod user.
      operationId: modUser
      parameters:
        - name: id
          in: path
          description: user id to ban
          required: true
          schema:
            type: integer
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - users_auth:
            - 'loged:user'
            - 'moder:user'
  /users:
    get:
      tags:
        - User
      summary: Get the list of users
      operationId: listUsers
      responses:
        '400':
          description: unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        default:
          description: The json list of users
          content:
            application/json:
              schema:
                properties:
                  length:
                    type: integer
                  list:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
    
  /trade:
    post:
      tags:
        - Trades
      summary: Create a new trade
      operationId: new_trade
      requestBody:
        content:
          application/json:
            schema:
              properties: 
                seller_id:
                  type: integer
                  format: int64   
                buyer_id:
                  type: integer
                  format: int64  
                product_id:
                  type: integer
                  format: int64
        description: The new trade info
        required: true
      responses:
        '400':
          description: unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        default:
          description: successful operation (id on message)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - users_auth:
            - 'loged:user'

  '/trade/{id}':  
    get:
      tags:
        - Trades
      summary: Get trade info
      operationId: get_trade
      parameters:
        - name: id
          in: path
          description: trade id
          required: true
          schema:
            type: integer
      responses:
        '400':
          description: unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trade'
      security:
        - users_auth:
            - 'loged:user'

  '/trade/{id}/close':  
    put:
      tags:
        - Trades
      summary: Close a trade for loged user
      operationId: close_trade
      parameters:
        - name: id
          in: path
          description: trade id
          required: true
          schema:
            type: integer
      responses:
        '400':
          description: unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - users_auth:
            - 'loged:user'

  /trades:
    get:
      tags:
       - Trades
      summary: List trades of current user
      operationId: list_trades
      responses:
        '400':
          description: unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        default:
          description: successful operation
          content:
            application/json:
              schema:
                properties:
                  length:
                    type: integer
                  list:
                    type: array
                    items:
                      $ref: '#/components/schemas/TradeInfo'
      security:
        - users_auth:
            - 'loged:user'

  '/trade/{id}/offer':  
    post:
      tags:
        - Trades
      summary: Offer products and money on the trade
      operationId: offer_trade
      parameters:
        - name: id
          in: path
          description: trade id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties: 
                price:
                  type: number
                  example: 9.99
                products:
                  type: array
                  items:
                    type: integer
                    format: int64         
        description: The products and price to offer
        required: true
      responses:
        '200':
          description: unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - users_auth:
            - 'loged:user'

    put:
      tags:
        - Trades
      summary: Edit the offer
      operationId: edit_offer
      parameters:
        - name: id
          in: path
          description: trade id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties: 
                price:
                  type: number
                  example: 9.99
                products:
                  type: array
                  items:
                    type: integer
                    format: int64         
        description: The products to delete
        required: true
      responses:
        '400':
          description: unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - users_auth:
            - 'loged:user'

  /search/products:
    get:
      tags:
        - Searchs
      summary: Search products
      operationId: search_product
      parameters:
        - name: text
          in: query
          description: text for product
          required: true
          schema:
            type: string
      responses:
        '400':
          description: unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        default:
          description: successful operation
          content:
            application/json:
              schema:
                properties:
                  length:
                    type: integer
                  list:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          format: int64
                        title:
                          type: string
                          example: "Gafas de sol" 
                  
  /search/users:
    get:
      tags:
        - Searchs
      summary: Search users
      operationId: search_users
      parameters:
        - name: text
          in: query
          description: text for user
          required: true
          schema:
            type: string
      responses:
        '400':
          description: unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        default:
          description: successful operation
          content:
            application/json:
              schema:
                properties:
                  length:
                    type: integer
                  list:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          format: int64
                        nick:
                          type: string
                          example: "Pepito" 

  '/comment/{user_id}':
    post:
      tags:
        - Comments
      summary: Create a new comentary
      description: "Se supone que esto solo se puede hacer tras comprar algo"
      operationId: new_comment
      parameters:
        - name: user_id
          in: path
          description: user id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties: 
                body:
                  type: string
                  description: "The body of the comment"
                  example: "Dat Seller is the best / Dat Buyer is the best"
                points:
                  type: integer
                  description: "From 0 to 5"
                  example: "3"
        description: Request info
        required: true
      responses:
        '400':
          description: unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - users_auth:
            - 'loged:user'

  '/comments/{user_id}':
    get:
      tags:
        - Comments
      summary: Get user comentaries
      operationId: get_comments
      parameters:
        - name: user_id
          in: path
          description: user id
          required: true
          schema:
            type: integer
      responses:
        '400':
          description: unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        default:
          description: successful operation
          content:
            application/json:
              schema:
                properties:
                  length:
                    type: integer
                  list:
                    type: array
                    items:
                      type: object
                      properties:
                        user:
                          type: string
                          example: "Pepito"
                        body:
                          type: string
                          description: "The body of the comment "
                          example: "Dat Seller is the best/ Dat Buyer is the best"
      
  '/msgs/{trade_id}':
    post:
      tags:
        - Messages
      summary: Create new msg
      operationId: new_msg
      parameters:
        - name: trade_id
          in: path
          description: trade id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties: 
                body:
                  type: string
                  description: "The body of the message"
                  example: "Dat Seller is the best/ Dat Buyer is the best"
      responses:
        '400':
          description: unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - users_auth:
            - 'loged:user'

    get:
      tags:
        - Messages
      summary: Get msgs
      operationId: get_msgs
      parameters:
        - name: trade_id
          in: path
          description: trade id
          required: true
          schema:
            type: integer
      responses:
        '400':
          description: unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        default:
          description: successful operation
          content:
            application/json:
              schema:
                properties:
                  length:
                    type: integer
                  list:
                    type: array
                    items:
                      type: object
                      properties:
                        nick:
                          type: string
                          example: "Pepito"
                        date:
                          type: string
                          format: date
                          example: "1999-12-24 23:45:10"
                        body:
                          type: string
                          description: "The body of the comment "
                          example: "Dat Seller is the best/ Dat Buyer is the best"
      security:
        - users_auth:
            - 'loged:user'


  /report:
    post:
      tags:
        - Reports
      summary: Create new report
      operationId: new_report
      responses:
        '400':
          description: unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      requestBody:
        content:
          application/json:
            schema:
              properties: 
                product_id:
                  type: integer
        description: Request info
        required: true
      security:
        - users_auth:
            - 'loged:user'

  /reports:
    get:
      tags:
        - Reports
      summary: Get report list
      operationId: list_report
      responses:
        '400':
          description: unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        default:
          description: successful operation
          content:
            application/json:
              schema:
                properties:
                  length:
                    type: integer
                  list:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          format: int64
                        user:
                          type: integer
                          format: int64
                        product:
                          type: integer
                          format: int64 
                        reason:
                          type: string
                          example: "Porque si"
                        date:
                          type: string
                          format: date

      security:
        - users_auth:
            - 'loged:user'
            - 'moder:user'

  /notification:
    post:
      tags:
        - Notifications
      summary: Create new notification
      operationId: new_notification
      responses:
        '400':
          description: unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      requestBody:
        content:
          application/json:
            schema:
              properties: 
                user_id:
                  type: integer
                  format: int64
                product_id:
                  type: integer
                  format: int64 
                  description: "can be null (writting 0)"
                category:
                  type: string
                  example: "Gafas"
                  description: "can be null (writting null)"
                text:
                  type: string
                  example: "Nuevo producto en categoria e interés"
        description: Request info
        required: true
      security:
        - users_auth:
            - 'loged:user'

  /notifications:
    get:
      tags:
        - Notifications
      summary: Get notifications list for current user
      operationId: list_notifications
      responses:
        '400':
          description: unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        default:
          description: successful operation
          content:
            application/json:
              schema:
                properties:
                  length:
                    type: integer
                  list:
                    type: array
                    items:
                      $ref: '#/components/schemas/Notification'
      security:
        - users_auth:
            - 'loged:user'
      
    delete:
      tags:
        - Notifications
      summary: delete all notifications for current user
      operationId: delete_notifications
      responses:
        '400':
          description: unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        default:
          description: unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - users_auth:
            - 'loged:user'

  '/notification/{id}':
    delete:
      tags:
        - Notifications
      summary: delete a notification for current user
      operationId: delete_notification
      parameters:
        - name: id
          in: path
          description: notification id
          required: true
          schema:
            type: integer
      responses:
        '400':
          description: unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        default:
          description: unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - users_auth:
            - 'loged:user'
  /categories:
    get:
      tags:
        - Categories
      summary: Get full list of categories
      operationId: list_categoties
      responses:
        '400':
          description: unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        default:
          description: successful operation
          content:
            application/json:
              schema:
                properties:
                  length:
                    type: integer
                  list:
                    type: array
                    items:
                      $ref: '#/components/schemas/Category'
      security:
        - users_auth:
            - 'loged:user'


  /upload:
    post:
        tags:
          - Images
        summary: Upload an image
        operationId: upload_file
        requestBody:
          content:
            image/png:
              schema:
                type: string
                format: binary
            image/jpg:
              schema:
                type: string
                format: binary
            image/jpeg:
              schema:
                type: string
                format: binary
        responses:
          '400':
            description: unsuccessful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiResponse'
          default:
            description: successful operation (url of image on message)
            content:
              application/json:
                schema:
                  properties:
                    length:
                      type: integer
                    list:
                      type: array
                      items:
                        $ref: '#/components/schemas/ApiResponse'
        security:
          - users_auth:
              - 'loged:user'

  "/uploads/{file}":
    get:
        tags:
          - Images
        summary: Get an image
        operationId: get_file
        parameters:
        - name: file
          in: path
          description: filename
          required: true
          schema:
            type: string
        responses:
          '400':
            description: unsuccessful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiResponse'
          default:
            description: successful operation (url of image on message)
            content:
              application/json:
                schema:
                  type: string
                  format: binary
                  example: "Esto es la imagen directamente osea no te devuelve nada raro\n
                            esto es directamente la url de una imagen, se poen tal cual y ya."



externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
servers:
  - url: 'https://virtserver.swaggerhub.com/unizar-30226-2019-0/Kalepa-API/1.0.0'
  - url: 'http://virtserver.swaggerhub.com/unizar-30226-2019-0/Kalepa-API/1.0.0'
components:
  securitySchemes:
    users_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://productstore.swagger.io/oauth/dialog'
          scopes:
            'write:products': modify products in your account
            'moder:user': edit user info
            'loged:user': log out session
    api_key:
      type: apiKey
      name: api_key
      in: header
  schemas:
    FullUser:
      type: object
      required:
        - id
        - nick
        - first_name
        - last_name
        - mail
        - dni
        - phone
        - is_mod
        - points
        - avatar
        - fnac
        - place
      properties:
        id:
          type: integer
          format: int64
        nick:
          type: string
          example: Alice
        first_name:
          type: string
          example: Foo
        last_name:
          type: string
          example: Bar
        mail:
          type: string
          example: mail@email.com
        phone:
          type: integer
          example: '666999222'
        is_mod:
          type: boolean
        ban_reason:
          type: string
          example: Razon expulsion
        points:
          type: number
        avatar:
          type: string
          example: 'http://images.com/235gadfg'
        fnac:
          type: string
          format: date
        dni:
          type: integer
          example: '123456789'
        place:
          type: string
          example: Madrid
        token:
          type: string
          example: 2sf78gsf68hsf5asfh68afh68a58fha68f
      xml:
        name: FullUser
    User:
      type: object
      required:
        - id
        - nick
        - first_name
        - last_name
        - mail
        - phone
        - points
        - avatar
        - fnac
        - place
      properties:
        id:
          type: integer
          format: int64
        nick:
          type: string
          example: Alice
        first_name:
          type: string
          example: Foo
        last_name:
          type: string
          example: Bar
        mail:
          type: string
          example: mail@email.com
        phone:
          type: integer
          example: '666999222'
        points:
          type: number
        avatar:
          type: string
          example: 'http://images.com/235gadfg'
        fnac:
          type: string
          format: date
        place:
          type: string
          example: Madrid
      xml:
        name: User

    NewUser:
      type: object
      required:
        - nick
        - first_name
        - last_name
        - pass_hash
        - mail
        - dni
        - phone
        - fnac
        - place
      properties:
        nick:
          type: string
          example: Alice
        first_name:
          type: string
          example: Foo
        last_name:
          type: string
          example: Bar
        mail:
          type: string
          example: mail@email.com
        pass:
          type: string
          example: pass
        phone:
          type: integer
          example: '666999222'
        fnac:
          type: string
          format: date
        dni:
          type: integer
          example: '123456789'
        place:
          type: string
          example: Madrid
      xml:
        name: NewUser

    Product:
      type: object
      required:
        - id
        - title
        - price
        - user_id
        - descript
        - publish_date
        - categories
        - bid_date
        - photo_urls
        - main_img
        - place
        - followers
        - visits
      properties:
        id:
          type: integer
          format: int64
        descript:
          type: string
          example: This product is wonderful
        user_id:
          type: integer
          format: int64
        price:
          type: number
        categories:
          type: array
          xml:
            name: category
            wrapped: true
          items:
            type: string
            example: Moda
        title:
          type: string
          example: Producto Molongo
        bid_date:
          type: string
          format: date
          example: "1999-12-24 23:45:10"
        boost_date:
          type: string
          format: date
          example: "1999-12-24 23:45:10"
        visits:
          type: integer
          format: int32
        followers:
          type: integer
          format: int32
        publish_date:
          type: string
          format: date
        main_img:
          type: string
          example: 'http://images.com/123af3'
        photo_urls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
            example: 'http://images.com/123af3'
        place:
          type: string
          description: location of the sell
          example: Zaragoza
        ban_reason:
          type: string
          example: Razon Baneo
      xml:
        name: Product

    ProductLite:
      type: object
      required:
        - id
        - title
        - price
        - user_id
        - descript
        - publish_date
        - categories
        - main_img
        - place
        - followers
      properties:
        id:
          type: integer
          format: int64
        descript:
          type: string
          example: This product is wonderful
        user_id:
          type: integer
          format: int64
        price:
          type: number
        categories:
          type: array
          xml:
            name: category
            wrapped: true
          items:
            type: string
            example: Moda
        title:
          type: string
          example: Producto Molongo
        bid_date:
          type: string
          format: date
          example: "1999-12-24 23:45:10"
        boost_date:
          type: string
          format: date
          example: "1999-12-24 23:45:10"
        followers:
          type: integer
          format: int32
        publish_date:
          type: string
          format: date
        main_img:
          type: string
          example: 'http://images.com/123af3'
        place:
          type: string
          description: location of the sell
          example: Zaragoza
    
    Bid:
      type: object
      properties:
        product_id:
          type: integer
          format: int64
        bid_date:
          type: string
          format: date
          example: "1999-12-24 23:45:10"
        title:
          type: string
          example: "Gafas de Sol Chulas"
        main_img:
          type: string
          example: "http://images.com/134135613613"
        max_bid:
          type: number
          example: 9.99
        max_bid_user:
          type: integer
          format: int64      

    TradeInfo:
      type: object
      properties:
        id:
          type: integer
          format: int64
        product_id:
          type: integer
          format: int64
        product_title:
          type: string
        seller_id:
          type: integer
          format: int64
        buyer_id:
          type: integer
          format: int64
        closed:
          type: boolean
        price:
          type: number
          example: 9.99  
        last_edit: 
          type: string
          format: date
          example: "1999-12-24 23:45:10"    

    Trade:  
      type: object
      properties:
        id:
          type: integer
          format: int64
        product_id:
          type: integer
          format: int64
        product_title:
          type: string
        seller_id:
          type: integer
          format: int64
        buyer_id:
          type: integer
          format: int64
        closed:
          type: boolean
        price:
          type: number
          example: 9.99  
        last_edit: 
          type: string
          format: date
          example: "1999-12-24 23:45:10" 
        products_offer:
          type: array
          items:
            type: integer
            format: int64

    NewProduct:
      type: object
      required:
        - title
        - price
        - descript
        - categories
        - photo_urls
        - main_img
        - place
      properties:
        descript:
          type: string
          example: This product is wonderful
        price:
          type: number
        categories:
          type: array
          xml:
            name: category
            wrapped: true
          items:
            type: string
            example: Moda
        title:
          type: string
          example: Producto Molongo
        bid_date:
          type: string
          format: date
          example: "1999-12-24 23:45:10"
        main_img:
          type: string
          example: 'http://images.com/123af3'
        photo_urls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
            example: 'http://images.com/123af3'
        place:
          type: string
          description: location of the sell
          example: Zaragoza
      xml:
        name: NewProduct
    
    Notification:
      type: object
      properties:
        id:
          type: integer
          format: int64
        user_id:
          type: integer
          format: int64
        product_id:
          type: integer
          format: int64 
        category:
          type: string
          example: "Gafas"
        text:
          type: string
          example: "Nuevo producto en categoria e interés"
        date:
          type: string
          format: date

    Category:
      type: object
      properties:
        cat_name:
          type: string
          example: "Vehiculo"
  
          
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
          description: |-
             0 - No errors
             1 - Duplicate 
             2 - Not found
             3 - Worng Data
             4 - No permisiones
             5 - Not logged in
             6 - Bad JSON format
             99 - Other
          default: 0
        type:
          type: string
          default: info
          description: 'Type of the message, info, error'
          example: info
        message:
          type: string
          description: Infomation or error description
          example: All Ok/Error