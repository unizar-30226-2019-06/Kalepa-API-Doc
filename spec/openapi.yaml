openapi: 3.0.0
info:
  description: |
    This is the api for Kalepa web and movil
    [https://kalepa-api.herokuapp.com/](https://kalepa-api.herokuapp.com/)
  version: "0.0.2-oas3"
  title: Kalepa
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: 738866@unizar.es
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: Echo
    description: Example echo operations
  - name: user
    description: Everything about an user
    externalDocs:
      description: Find out more (WIP)
      url: 'http://kalepa-api.herokuapp.com'
  - name: product
    description: Products in sell by an user
  - name: user
    description: Operations about user
    externalDocs:
      description: Find out more about our store
      url: 'http://swagger.io'
paths:
  /echo: # path parameter in curly braces
    post: # documentation for POST operation for this path
      tags:
        - Echo
      summary: Echo test
      description: Receive the exact message you've sent
      operationId: echo
      security:
        - api_key: []
        - basic_auth: []
      responses:
        '200':
          description: OK
          # document headers for this response
          headers:
            X-Rate-Limit: # Header name
              description: calls per hour allowed by the user
              schema: # Header schema
                type: integer
                format: int32
            X-Expires-After:
              $ref: '#/components/headers/ExpiresAfter'
          content:
            application/json:
              schema:
                type: string
              examples:
                response:
                  value: Hello world!
            application/xml:
              schema:
                type: string
            text/csv:
              schema:
                type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: Hello world!
          application/xml:
            schema:
              type: string
              example: Hello world!
        description: Echo payload
        required: true


  /product:
    post:
      tags:
        - product
      summary: Add a new product to the store
      operationId: addproduct
      responses:
        '405':
          description: Invalid input
        default:
          description: 'successful operation, return product id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - users_auth:
            - 'write:products'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewProduct'
          application/xml:
            schema:
              $ref: '#/components/schemas/NewProduct'
        description: product object that needs to be added to the store
        required: true
  /product/findByCats:
    get:
      tags:
        - product
      summary: Finds products by tags
      description: >-
        Muliple tags can be provided with comma separated strings. Use\ \ tag1,
        tag2, tag3 for testing.
      operationId: findproductsByTags
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '400':
          description: Invalid tag value
      security:
        - users_auth:
            - 'write:products'
      deprecated: false
  '/product/{product_id}':
    get:
      tags:
        - product
      summary: Find product by ID
      description: Returns a single product
      operationId: getproductById
      parameters:
        - name: product_id
          in: path
          description: ID of product to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
            application/xml:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid ID supplied
        '404':
          description: product not found
      security:
        - api_key: []
    put:
      tags:
        - product
      summary: Updates a product in the store with form data
      operationId: updateproductWithForm
      parameters:
        - name: product_id
          in: path
          description: ID of product that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '405':
          description: Invalid input
      security:
        - users_auth:
            - 'write:products'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated the product info
        required: true
    delete:
      tags:
        - product
      summary: Deletes a product
      operationId: deleteproduct
      parameters:
        - name: api_key
          in: header
          required: false
          schema:
            type: string
        - name: product_id
          in: path
          description: product id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: product not found
      security:
        - users_auth:
            - 'write:products'
  '/products/{product_id}/addPhoto':
    post:
      tags:
        - product
      summary: uploads an image
      operationId: uploadFile
      parameters:
        - name: product_id
          in: path
          description: ID of product to update
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - users_auth:
            - 'write:products'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image_url:
                  description: url of the image
                  type: string
                  format: binary
              required:
                - image_url
  /store/inventory:
    get:
      tags:
        - store
      summary: Returns product inventories by boost and location if exist on request
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
      security:
        - api_key: []
  /user:
    post:
      tags:
        - user
      summary: Create new user
      description: This can be used wihtout login
      operationId: createUser
      responses:
        default:
          description: 'successful operation, return user id on message'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
        description: Created user object
        required: true
    get:
      tags:
        - user
      summary: Get logged user info
      operationId: getUser
      parameters:
        - name: id
          in: query
          description: The name that needs to be fetched. Use user1 for testing.
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Some error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullUser'
            application/xml:
              schema:
                $ref: '#/components/schemas/FullUser'
      security:
        - users_auth:
            - 'loged:user'
    put:
      tags:
        - user
      summary: Updated logged user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: id
          in: query
          description: id that need to be updated
          required: true
          schema:
            type: string
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - users_auth:
            - 'loged:user'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FullUser'
        description: Updated full user object (id is not requiered)
        required: true
    delete:
      tags:
        - user
      summary: Delete logged user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: id
          in: query
          description: The id that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - users_auth:
            - 'loged:user'
  /user/follows:
    get:
      tags:
        - user
      summary: Get logged user follow products
      description: This can only be done by the logged in user.
      operationId: userWishList
      parameters:
        - name: id
          in: query
          description: The id of the user
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Some error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        default:
          description: successful operation
          content:
            application/json:
              schema:
                properties:
                  length:
                    type: integer
                  list:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        title:
                          type: string
                          example: Gafas
                        descript:
                          type: string
                          example: Descripcion del producto
                        price:
                          type: number
                          example: '9.99'
                        main_image:
                          type: string
                          format: url
                          example: 'http://images.com/134h1u3'
            application/xml:
              schema:
                properties:
                  length:
                    type: integer
                  list:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        title:
                          type: string
                          example: Gafas
                        descript:
                          type: string
                          example: Descripcion del producto
                        price:
                          type: number
                          example: '9.99'
                        main_image:
                          type: string
                          format: url
                          example: 'http://images.com/134h1u3'
      security:
        - users_auth:
            - 'loged:user'
  /user/login:
    post:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      requestBody:
        content:
          application/json:
            schema:
              properties:
                nick:
                  type: string
                  example: Pepito
                pass:
                  type: string
                  example: pass
                remember:
                  type: boolean
        description: Created user object
        required: true
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - users_auth:
            - 'loged:user'
  '/profile/{nick}':
    get:
      tags:
        - user
      summary: Get user info by user nick
      operationId: getUserByNick
      parameters:
        - name: nick
          in: path
          description: The name that needs to be fetched. Use user1 for testing.
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Some error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  '/user/{id}':
    get:
      tags:
        - user
      summary: Get user info by user id
      description: This can only be done by the logged mod user.
      operationId: getUserById
      parameters:
        - name: id
          in: path
          description: The name that needs to be fetched. Use user1 for testing.
          required: true
          schema:
            type: integer
      responses:
        '400':
          description: Some error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullUser'
            application/xml:
              schema:
                $ref: '#/components/schemas/FullUser'
      security:
        - users_auth:
            - 'loged:user'
            - 'moder:user'
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged mod user.
      operationId: updateUserById
      parameters:
        - name: id
          in: path
          description: id that need to be updated
          required: true
          schema:
            type: integer
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - users_auth:
            - 'loged:user'
            - 'moder:user'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FullUser'
        description: Updated full user object
        required: true
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged mod user.
      operationId: deleteUserById
      parameters:
        - name: id
          in: path
          description: The id that needs to be deleted
          required: true
          schema:
            type: integer
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - users_auth:
            - 'loged:user'
            - 'moder:user'
  '/user/{id}/ban':
    put:
      tags:
        - user
      summary: Ban user
      description: This can only be done by the logged mod user.
      operationId: banUser
      parameters:
        - name: id
          in: path
          description: user id to ban
          required: true
          schema:
            type: integer
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - users_auth:
            - 'loged:user'
            - 'moder:user'
      requestBody:
        content:
          application/json:
            schema:
              properties:
                ban_reason:
                  type: string
                  example: Ban for scam
                ban_until:
                  type: string
                  format: date
        description: Updated full user object
        required: true
  '/user/{id}/mod':
    put:
      tags:
        - user
      summary: Make mod a user
      description: This can only be done by the logged mod user.
      operationId: modUser
      parameters:
        - name: id
          in: path
          description: user id to ban
          required: true
          schema:
            type: integer
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - users_auth:
            - 'loged:user'
            - 'moder:user'
  /users:
    get:
      tags:
        - user
      summary: Get the list of users
      operationId: listUsers
      responses:
        '200':
          description: unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        default:
          description: The json list of users
          content:
            application/json:
              schema:
                properties:
                  length:
                    type: integer
                  list:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
            application/xml:
              schema:
                properties:
                  length:
                    type: integer
                  list:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
servers:
  - url: 'https://virtserver.swaggerhub.com/unizar-30226-2019-0/Kalepa-API/1.0.0'
  - url: 'http://virtserver.swaggerhub.com/unizar-30226-2019-0/Kalepa-API/1.0.0'
components:
  securitySchemes:
    users_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://productstore.swagger.io/oauth/dialog'
          scopes:
            'write:products': modify products in your account
            'moder:user': edit user info
            'loged:user': log out session
    api_key:
      type: apiKey
      name: api_key
      in: header
  schemas:
    FullUser:
      type: object
      required:
        - id
        - nick
        - first_name
        - last_name
        - mail
        - dni
        - phone
        - is_mod
        - points
        - avatar
        - fnac
        - place
      properties:
        id:
          type: integer
          format: int64
        nick:
          type: string
          example: Alice
        first_name:
          type: string
          example: Foo
        last_name:
          type: string
          example: Bar
        mail:
          type: string
          example: mail@email.com
        phone:
          type: integer
          example: '666999222'
        is_mod:
          type: boolean
        ban_reason:
          type: string
          example: Razon expulsion
        points:
          type: number
        avatar:
          type: string
          example: 'http://images.com/235gadfg'
        fnac:
          type: string
          format: date
        dni:
          type: integer
          example: '123456789'
        place:
          type: string
          example: Madrid
        token:
          type: string
          example: 2sf78gsf68hsf5asfh68afh68a58fha68f
      xml:
        name: FullUser
    User:
      type: object
      required:
        - id
        - nick
        - first_name
        - last_name
        - mail
        - phone
        - points
        - avatar
        - fnac
        - place
      properties:
        id:
          type: integer
          format: int64
        nick:
          type: string
          example: Alice
        first_name:
          type: string
          example: Foo
        last_name:
          type: string
          example: Bar
        mail:
          type: string
          example: mail@email.com
        phone:
          type: integer
          example: '666999222'
        points:
          type: number
        avatar:
          type: string
          example: 'http://images.com/235gadfg'
        fnac:
          type: string
          format: date
        place:
          type: string
          example: Madrid
      xml:
        name: User
    NewUser:
      type: object
      required:
        - nick
        - first_name
        - last_name
        - pass_hash
        - mail
        - dni
        - phone
        - fnac
        - place
      properties:
        nick:
          type: string
          example: Alice
        first_name:
          type: string
          example: Foo
        last_name:
          type: string
          example: Bar
        mail:
          type: string
          example: mail@email.com
        pass:
          type: string
          example: pass
        phone:
          type: integer
          example: '666999222'
        fnac:
          type: string
          format: date
        dni:
          type: integer
          example: '123456789'
        place:
          type: string
          example: Madrid
      xml:
        name: NewUser
    Product:
      type: object
      required:
        - id
        - title
        - price
        - user_id
        - descript
        - publish_date
        - categories
        - photo_urls
        - place
        - followers
        - visits
      properties:
        id:
          type: integer
          format: int64
        descript:
          type: string
          example: This product is wonderful
        user_id:
          type: integer
          format: int64
        price:
          type: number
        categories:
          type: array
          xml:
            name: category
            wrapped: true
          items:
            type: string
            example: Moda
        title:
          type: string
          example: Producto Molongo
        bid:
          type: string
          format: date
        boost_date:
          type: string
          format: date
        visits:
          type: integer
          format: int32
        followers:
          type: integer
          format: int32
        publish_date:
          type: string
          format: date
        photo_urls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
            example: 'http://images.com/123af3'
        place:
          type: string
          description: location of the sell
          example: Zaragoza
        is_removed:
          type: boolean
        ban_reason:
          type: string
          example: Razon Baneo
      xml:
        name: Product
    NewProduct:
      type: object
      required:
        - title
        - price
        - user_id
        - descript
        - categories
        - photo_urls
        - place
      properties:
        descript:
          type: string
          example: This product is wonderful
        user_id:
          type: integer
          format: int64
        price:
          type: number
        categories:
          type: array
          xml:
            name: category
            wrapped: true
          items:
            type: string
            example: Moda
        title:
          type: string
          example: Producto Molongo
        bid:
          type: string
          format: date
        photo_urls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
            example: 'http://images.com/123af3'
        place:
          type: string
          description: location of the sell
          example: Zaragoza
      xml:
        name: NewProduct
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
          description: |-
            0 - No errors
              1 - Duplicate 
              2 - Not found
             3 - Worng Data
             4 - No permisiones
             5 - Not logged in
             6 - Bad JSON format
             99 - Other
          default: '0'
        type:
          type: string
          default: info
          description: 'Type of the message, info, error'
          example: info
        message:
          type: string
          description: Infomation or error description
          example: All ok